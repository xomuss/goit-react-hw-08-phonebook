{"version":3,"sources":["redux/phonebook/phonebook-operations.js","components/Form/Form.js","redux/phonebook/phonebook-selectors.js","components/Filter/Filter.js","components/ContactsList/ContactsList.js","views/ContactsPage.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","components/Form/Form.module.css","components/Filter/Filter.module.css","components/ContactsList/ContactList.module.css"],"names":["contact","dispatch","addContactRequest","axios","post","then","data","addContactSuccess","catch","error","addContactError","message","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","Form","state","name","number","nameInputId","shortid","generate","telInputId","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","contacts","find","includes","onSubmit","reset","alert","className","styles","form","this","htmlFor","input","onChange","type","pattern","title","required","button","Component","connect","items","cont","operations","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","filterNormalize","toLowerCase","phonebookSelectors","filterContscts","label","contactsData","onDeleteContact","phonebookOperations","contsct__list","map","contact__list_el","contact__list_text","onClick","ContactsPage","fetchContacts","formSubmitHandler","isLoadingContacts","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","setCharacters","_alphabet_","length","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","RegExp","replace","test"],"mappings":"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","file":"static/js/3.2eb8f3b2.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './phonebook-actions';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error.message)));\r\n};\r\n\r\nconst addContact = contact => dispatch => {\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error.message)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error.message)));\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n  fetchContacts,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport operations from '../../redux/phonebook/phonebook-operations';\r\nimport styles from './Form.module.css';\r\nimport shortid from 'shortid';\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  telInputId = shortid.generate();\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const foundName = this.props.contacts.find(({ name }) =>\r\n      name.includes(this.state.name),\r\n    );\r\n    if (!foundName) {\r\n      this.props.onSubmit(this.state);\r\n      this.reset();\r\n      return;\r\n    }\r\n    alert('this name already exist');\r\n\r\n    // this.props.onSubmit(this.state);\r\n    // : alert('This name already exist');\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className={styles.form} onSubmit={this.handleSubmit}>\r\n        <label htmlFor={this.nameInputId}>\r\n          Name\r\n          <input\r\n            className={styles.input}\r\n            id={this.nameInputId}\r\n            onChange={this.handleChange}\r\n            value={this.state.name}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label htmlFor={this.telInputId}>\r\n          Telephone\r\n          <input\r\n            className={styles.input}\r\n            id={this.telInputId}\r\n            onChange={this.handleChange}\r\n            value={this.state.number}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button className={styles.button} type=\"submit\">\r\n          Add Contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: cont => dispatch(operations.addContact(cont)),\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst allContacts = state => state.contacts.items;\r\n\r\n// const getVisibleContacts = state => {\r\n//   const contacts = allContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const filterNormalize = filter.toLowerCase();\r\n\r\n//   return contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(filterNormalize),\r\n//   );\r\n// };\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [allContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const filterNormalize = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filterNormalize),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getFilter,\r\n  getVisibleContacts,\r\n};\r\n","import React from 'react';\r\nimport styles from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { phonebookSelectors, filterContscts } from '../../redux/phonebook';\r\n\r\nconst Filter = ({ onChange, value }) => (\r\n  <label className={styles.label}>\r\n    Find contacts by name\r\n    <input\r\n      className={styles.input}\r\n      onChange={onChange}\r\n      value={value}\r\n      name=\"filter\"\r\n    />\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    value: phonebookSelectors.getFilter(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => {\r\n    const value = e.target.value;\r\n    return dispatch(filterContscts(value));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styles from './ContactList.module.css';\r\nimport { phonebookOperations, phonebookSelectors } from '../../redux/phonebook';\r\n\r\nconst ContactsList = ({ contactsData, onDeleteContact }) => (\r\n  <ul className={styles.contsct__list}>\r\n    {contactsData.map(({ name, number, id }) => (\r\n      <li key={id} className={styles.contact__list_el}>\r\n        <p className={styles.contact__list_text}>\r\n          {name}: {number}\r\n        </p>\r\n        <button onClick={() => onDeleteContact(id)}>delete</button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  contactsData: phonebookSelectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(phonebookOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import React, { Component } from 'react';\r\nimport Form from '../components/Form';\r\nimport Filter from '../components/Filter';\r\nimport ContactsList from '../components/ContactsList';\r\nimport { connect } from 'react-redux';\r\nimport { phonebookOperations, phonebookSelectors } from '../redux/phonebook';\r\n\r\nclass ContactsPage extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Phone Book</h1>\r\n        <Form onSubmit={this.formSubmitHandler} />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        {this.props.isLoadingContacts && <h1>download...</h1>}\r\n        <ContactsList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingContacts: phonebookSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(phonebookOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsPage);\r\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__A3EOk\",\"input\":\"Form_input__2ZkeY\",\"button\":\"Form_button__1s7Wi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2op2c\",\"label\":\"Filter_label__Ady4d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contsct__list\":\"ContactList_contsct__list__1Zyr2\",\"contact__list_el\":\"ContactList_contact__list_el__1Adqm\",\"contact__list_text\":\"ContactList_contact__list_text__1O4K9\"};"],"sourceRoot":""}